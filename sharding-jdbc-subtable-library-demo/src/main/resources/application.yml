# Mybatis配置
mybatis:
  # mybatis的配置文件路径
  config-location: classpath:mybatis/mybatis-config.xml
  # mapper配置文件路径
  mapper-locations: classpath:mybatis/com/mapper/*.xml
# Sharding Sphere 配置
spring:
  shardingsphere:
    # 数据源配置
    datasource:
      # 配置的所有逻辑数据源名称
      names: ds0,ds1
      # 逻辑数据源ds0的详细配置信息
      ds0:
        # 使用的数据连接池类型
        type: com.alibaba.druid.pool.DruidDataSource
        # 配制的driver
        driver-class-name: com.mysql.jdbc.Driver
        # 配置的url
        url: jdbc:mysql://localhost:3306/database0
        # 配置的用户名
        username: root
        # 配置的密码
        password: mysql
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/database1
        username: root
        password: mysql
    sharding:
      binding-tables: t_order
      # 分库策略
      default-database-strategy:
        inline:
          algorithm-expression: ds$->{user_id % 2} # 分库算法表达式
          sharding-column: user_id # 根据user_id进行分库
      # 分表策略
      tables:
        # 逻辑表名称t_order
        t_order:
          # 物理表所在的实际位置 ds0.t_order_0;ds0.t_order_1;ds1_t_order_0;ds1_t_order_1
          actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}
          key-generator:  # 分布式主键生成策略
            column: id   # 主键名称
            type: SNOWFLAKE # 采用雪花算法
          # t_order表的分表策略
          table-strategy:
            inline:
              algorithm-expression: t_order_$->{order_id % 2} # 分表的算法表达式
              sharding-column: order_id  #根据order_id进行分表
    # sql打印
    props:
      sql:
        show: true

